(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{422:function(v,_,e){v.exports=e.p+"assets/img/image.fca34c2d.png"},452:function(v,_,e){"use strict";e.r(_);var o=e(2),t=Object(o.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"webpack-构建流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webpack-构建流程"}},[v._v("#")]),v._v(" webpack 构建流程")]),v._v(" "),_("h2",{attrs:{id:"一-初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一-初始化"}},[v._v("#")]),v._v(" 一 初始化")]),v._v(" "),_("ol",[_("li",[v._v("读取默认配置文件 "),_("code",[v._v("webpack.config.js")]),v._v(", 主要包含 入口（"),_("code",[v._v("entry")]),v._v("）; 文件路径指向（"),_("code",[v._v("resolve.alias")]),v._v("）; 生成文件的路径与名称 ("),_("code",[v._v("output")]),v._v("); 处理各个模块的loader ("),_("code",[v._v("module.loaders")]),v._v("); 插件("),_("code",[v._v("plugins")]),v._v(")")]),v._v(" "),_("li",[v._v("读取默认配置项拷贝到"),_("code",[v._v("options")]),v._v("对象中，加载用户配置的 "),_("code",[v._v("plugins")])]),v._v(" "),_("li",[v._v("初始化编译对象 "),_("code",[v._v("Compiler")]),v._v(", 他不执行具体的任务，只是进行一些调度工作")])]),v._v(" "),_("h2",{attrs:{id:"二-编译"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二-编译"}},[v._v("#")]),v._v(" 二 编译")]),v._v(" "),_("p",[v._v("初始化完成后会调用 "),_("code",[v._v("compiler")]),v._v("对象的"),_("code",[v._v("run")]),v._v("方法开始编译，主要流程如下：")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("compile")]),v._v(" 开始编译")]),v._v(" "),_("li",[_("code",[v._v("make")]),v._v(" 从入口点开始分析模块以及模块的依赖，创建这些模块对象")]),v._v(" "),_("li",[_("code",[v._v("build-module")]),v._v(" 构建模块")]),v._v(" "),_("li",[_("code",[v._v("seal")]),v._v(" 封装构建结构")]),v._v(" "),_("li",[_("code",[v._v("emit")]),v._v(" 把各个"),_("code",[v._v("chunk")]),v._v("输出到结果文件")])]),v._v(" "),_("h2",{attrs:{id:"三-输出"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三-输出"}},[v._v("#")]),v._v(" 三 输出")]),v._v(" "),_("p",[v._v("在webpack源码中，"),_("code",[v._v("compiler")]),v._v("包含上面3个阶段，在他身上挂载着各种生命周期钩子。"),_("code",[v._v("compilation")]),v._v(" 主要负责编译相关工作。\n"),_("img",{attrs:{src:e(422),alt:""}})]),v._v(" "),_("h2",{attrs:{id:"整体实现流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#整体实现流程"}},[v._v("#")]),v._v(" 整体实现流程：")]),v._v(" "),_("ol",[_("li",[v._v("读取配置参数")]),v._v(" "),_("li",[v._v("用配置参数初始化"),_("code",[v._v("Compiler")]),v._v("对象")]),v._v(" "),_("li",[v._v("挂载配置文件中的插件")]),v._v(" "),_("li",[v._v("执行 "),_("code",[v._v("compiler")]),v._v(" 实例上的 "),_("code",[v._v("run")]),v._v(" 方法")]),v._v(" "),_("li",[v._v("根据配置对象中的 "),_("code",[v._v("entry")]),v._v(" 配置项找到所有入口")]),v._v(" "),_("li",[v._v("从入口出发，调用配置的 "),_("code",[v._v("loader")]),v._v(" 对各个模块进行编译")]),v._v(" "),_("li",[v._v("找出该模块依赖的模块，再对依赖的模块进行编译")]),v._v(" "),_("li",[v._v("等所有模块编译完成后，根据模块之间的依赖关系，组装代码块 "),_("code",[v._v("chunk")])]),v._v(" "),_("li",[v._v("把各个代码块 "),_("code",[v._v("chunk")]),v._v(" 转换成一个个文件加入到输出列表")]),v._v(" "),_("li",[v._v("确定好输出内容后，根据配置好的输出路径和文件名，将文件内容写入到文件系统。")])])])}),[],!1,null,null,null);_.default=t.exports}}]);