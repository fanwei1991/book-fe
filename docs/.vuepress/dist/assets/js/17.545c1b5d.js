(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{437:function(t,v,_){"use strict";_.r(v);var a=_(2),l=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"重绘和回流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重绘和回流"}},[t._v("#")]),t._v(" 重绘和回流")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("回流： 布局引擎根据各种样式计算每个盒子在页面上的位置和大小")])]),t._v(" "),v("li",[v("p",[t._v("重绘： 当计算好盒模型的位置和大小后，根据盒子模型的特性进行绘制")])])]),t._v(" "),v("h2",{attrs:{id:"浏览器渲染机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染机制"}},[t._v("#")]),t._v(" 浏览器渲染机制：")]),t._v(" "),v("ul",[v("li",[t._v("解析HTML，生成DOM树，解析CSS，生成CSSOM树")]),t._v(" "),v("li",[t._v("将DOM树和CSSOM树结合，生成渲染树(Render Tree)")]),t._v(" "),v("li",[t._v("Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）")]),t._v(" "),v("li",[t._v("Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素")]),t._v(" "),v("li",[t._v("Display:将像素发送给GPU，展示在页面上")])]),t._v(" "),v("h3",{attrs:{id:"回流触发时机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回流触发时机"}},[t._v("#")]),t._v(" 回流触发时机：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("添加或删除可见的DOM元素")])]),t._v(" "),v("li",[v("p",[t._v("元素位置发生变化")])]),t._v(" "),v("li",[v("p",[t._v("元素尺寸发生变化")])]),t._v(" "),v("li",[v("p",[t._v("内容发生变化")])]),t._v(" "),v("li",[v("p",[t._v("页面刚开始渲染")])]),t._v(" "),v("li",[v("p",[t._v("浏览器窗口变化")])])])])}),[],!1,null,null,null);v.default=l.exports}}]);