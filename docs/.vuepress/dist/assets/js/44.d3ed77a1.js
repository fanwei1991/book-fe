(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{466:function(t,v,_){"use strict";_.r(v);var a=_(2),s=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"http1-0-和-http2-0的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-0-和-http2-0的区别"}},[t._v("#")]),t._v(" http1.0 和 http2.0的区别")]),t._v(" "),v("h3",{attrs:{id:"http1-0"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-0"}},[t._v("#")]),t._v(" http1.0")]),t._v(" "),v("p",[t._v("每次请求都需要建立一个TCP连接，服务器处理完成请求后立即断开TCP连接。")]),t._v(" "),v("h3",{attrs:{id:"http1-1"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" http1.1")]),t._v(" "),v("p",[t._v("默认支持长连接（"),v("code",[t._v("Connection: keep-alive")]),t._v("）,即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟")]),t._v(" "),v("p",[t._v("http1.1 在 http1.0 基础上新增内容：")]),t._v(" "),v("ul",[v("li",[t._v("引入更多的缓存策略，"),v("code",[t._v("If-Unmodified-Since")]),t._v(", "),v("code",[t._v("If-Match")]),t._v(", "),v("code",[t._v("If-None-Match")]),t._v("等缓存头来控制缓存策略")]),t._v(" "),v("li",[t._v("引入range, 允许只请求资源的某个部分")]),t._v(" "),v("li",[t._v("新增请求方法： put, delete, options等")])]),t._v(" "),v("h3",{attrs:{id:"http2-0"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" http2.0")]),t._v(" "),v("p",[t._v("相比之前版本，性能上有很大的提升，如添加如下特性：")]),t._v(" "),v("ul",[v("li",[t._v("多路复用")]),t._v(" "),v("li",[t._v("二进制分帧")]),t._v(" "),v("li",[t._v("首部压缩")]),t._v(" "),v("li",[t._v("服务器推送")])]),t._v(" "),v("h4",{attrs:{id:"多路复用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用")]),t._v(" "),v("p",[t._v("复用http连接，在一个连接里，客户端和浏览器端可以 "),v("strong",[t._v("同时")]),t._v(" 发送多个请求或响应，而且不用按照顺序一一对应，这样就避免了’队头堵塞‘")]),t._v(" "),v("h4",{attrs:{id:"二进制分帧"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二进制分帧"}},[t._v("#")]),t._v(" 二进制分帧")]),t._v(" "),v("p",[t._v("采用二进制传输，而非1.x的文本格式，传输更高效。将请求和响应数据分割成更小的帧。")]),t._v(" "),v("p",[t._v("每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装，这也是多路复用同时发送数据的实现条件")]),t._v(" "),v("h4",{attrs:{id:"首部压缩"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#首部压缩"}},[t._v("#")]),t._v(" 首部压缩")]),t._v(" "),v("p",[t._v("HTTP/2在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送")]),t._v(" "),v("p",[t._v("首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新")]),t._v(" "),v("h4",{attrs:{id:"服务器推送"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[t._v("#")]),t._v(" 服务器推送")]),t._v(" "),v("p",[t._v("HTTP2引入服务器推送，允许服务端推送资源给客户端")]),t._v(" "),v("p",[t._v("服务器会顺便把一些客户端需要的资源一起推送到客户端，如在响应一个页面请求中，就可以随同页面的其它资源")]),t._v(" "),v("p",[t._v("免得客户端再次创建连接发送请求到服务器端获取")]),t._v(" "),v("p",[t._v("这种方式非常合适加载静态资源")]),t._v(" "),v("h3",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("p",[t._v("HTTP1.0：")]),t._v(" "),v("ul",[v("li",[t._v("浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接")])]),t._v(" "),v("p",[t._v("HTTP1.1：")]),t._v(" "),v("ul",[v("li",[t._v("引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用")]),t._v(" "),v("li",[t._v("在同一个TCP连接里面，客户端可以同时发送多个请求")]),t._v(" "),v("li",[t._v("虽然允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的，服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着")]),t._v(" "),v("li",[t._v("新增了一些请求方法")]),t._v(" "),v("li",[t._v("新增了一些请求头和响应头")])]),t._v(" "),v("p",[t._v("HTTP2.0：")]),t._v(" "),v("ul",[v("li",[t._v("采用二进制格式而非文本格式")]),t._v(" "),v("li",[t._v("完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行")]),t._v(" "),v("li",[t._v("使用报头压缩，降低开销")]),t._v(" "),v("li",[t._v("服务器推送")])])])}),[],!1,null,null,null);v.default=s.exports}}]);